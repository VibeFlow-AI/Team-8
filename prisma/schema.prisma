// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Sample {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}


enum Role {
  student
  mentor
}

enum EducationLevel {
  Grade_9 @map("Grade 9")
  O_L     @map("O/L")
  A_L     @map("A/L")
}

enum LearningStyle {
  Visual
  Hands_On @map("Hands-On")
  Theoretical
  Mixed
}

enum SkillLevel {
  Beginner
  Intermediate
  Advanced
}

enum PreferredLanguage {
  English
  Sinhala
  Tamil
  Other
}

enum TeachingExperience {
  None
  One_to_Three_Years @map("1-3 years")
  Three_to_Five_Years @map("3-5 years")
  Five_Plus_Years @map("5+ years")
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

model User {
  userId      BigInt    @id @default(autoincrement()) @map("user_id")
  firebaseUid String    @unique @map("firebase_uid")
  email       String    @unique
  role        Role
  createdAt   DateTime  @default(now()) @map("created_at")
  lastLogin   DateTime? @map("last_login")

  // Relations
  studentDetails StudentDetails?
  mentorDetails  MentorDetails?

  @@map("users")
}

model StudentDetails {
  userId                  BigInt         @id @map("user_id")
  fullName               String?        @map("full_name")
  age                    Int?
  contactNumber          String?        @map("contact_number")
  educationLevel         EducationLevel? @map("education_level")
  school                 String?
  preferredLearningStyle LearningStyle? @map("preferred_learning_style")
  learningDisabilities   Boolean?       @map("learning_disabilities")
  disabilityDetails      String?        @map("disability_details")
  createdAt              DateTime       @default(now()) @map("created_at")

  // Relations
  user            User              @relation(fields: [userId], references: [userId])
  studentSubjects StudentSubject[]
  bookings        Booking[]

  @@map("studentdetails")
}

model StudentSubject {
  id         BigInt     @id @default(autoincrement())
  userId     BigInt     @map("user_id")
  subjectName String    @map("subject_name")
  currentYear Int       @map("current_year")
  skillLevel  SkillLevel @map("skill_level")

  // Relations
  studentDetails StudentDetails @relation(fields: [userId], references: [userId])

  @@map("studentsubjects")
}

model MentorDetails {
  userId             BigInt            @id @map("user_id")
  fullName          String?           @map("full_name")
  age               Int?
  contactNumber     String?           @map("contact_number")
  preferredLanguage PreferredLanguage? @map("preferred_language")
  currentLocation   String?           @map("current_location")
  bio               String?
  professionalRole  String?           @map("professional_role")
  createdAt         DateTime          @default(now()) @map("created_at")

  // Relations
  user           User            @relation(fields: [userId], references: [userId])
  mentorSubjects MentorSubject[]
  socialLinks    SocialLink[]
  sessions       Session[]

  @@map("mentordetails")
}

model MentorSubject {
  id                 BigInt            @id @default(autoincrement())
  userId             BigInt            @map("user_id")
  subjectName        String            @map("subject_name")
  teachingExperience TeachingExperience @map("teaching_experience")
  preferredLevels    String[]          @map("preferred_levels")

  // Relations
  mentorDetails MentorDetails @relation(fields: [userId], references: [userId])

  @@map("mentorsubjects")
}

model SocialLink {
  id                    BigInt   @id @default(autoincrement())
  userId                BigInt   @map("user_id")
  linkedinUrl          String   @map("linkedin_url")
  githubOrPortfolioUrl String?  @map("github_or_portfolio_url")
  profilePictureUrl    String?  @map("profile_picture_url")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  mentorDetails MentorDetails @relation(fields: [userId], references: [userId])

  @@map("sociallinks")
}

model Session {
  sessionId      BigInt   @id @default(autoincrement()) @map("session_id")
  mentorUserId   BigInt   @map("mentor_user_id")
  subjectName    String   @map("subject_name")
  sessionDate    DateTime @map("session_date") @db.Date
  startTime      DateTime @map("start_time") @db.Time
  durationHours  Int      @map("duration_hours")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  mentorDetails MentorDetails @relation(fields: [mentorUserId], references: [userId])
  bookings      Booking[]

  @@map("sessions")
}

model Booking {
  bookingId       BigInt        @id @default(autoincrement()) @map("booking_id")
  sessionId       BigInt        @map("session_id")
  studentUserId   BigInt        @map("student_user_id")
  bookingStatus   BookingStatus @map("booking_status")
  paymentSlipUrl  String?       @map("payment_slip_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relations
  session        Session        @relation(fields: [sessionId], references: [sessionId])
  studentDetails StudentDetails @relation(fields: [studentUserId], references: [userId])

  @@map("bookings")
}
